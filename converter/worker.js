const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const playwright = require('playwright');
const archiver = require('archiver');
const fsExtra = require('fs-extra');

// Simple markdown to HTML converter for demo (replaces Pandoc dependency)
const markdownToHtml = (markdown) => {
  let html = markdown
    // Headers
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    // Bold
    .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
    // Italic
    .replace(/\*(.*)\*/gim, '<em>$1</em>')
    // Paragraphs (split by double newlines)
    .split('\n\n')
    .map(paragraph => {
      paragraph = paragraph.trim();
      if (paragraph.startsWith('<h') || paragraph === '') {
        return paragraph;
      }
      return `<p>${paragraph.replace(/\n/g, ' ')}</p>`;
    })
    .join('\n');

  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formatted Book</title>
</head>
<body>
${html}
</body>
</html>`;
};

// Ensure required directories exist
const ensureDirectories = () => {
  const dirs = ['uploads', 'output', 'public/exports', 'template-css', 'fonts', 'checklist'];
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
};

// Get template-specific page settings
const getTemplatePageSettings = (templateId) => {
  const settings = {
    'serif-classic': {
      format: 'A4',
      width: '6in',
      height: '9in',
      margin: {
        top: '0.75in',
        bottom: '0.75in',
        left: '0.875in',
        right: '0.625in'
      }
    },
    'trade-clean': {
      format: 'A4',
      width: '5.5in',
      height: '8.5in',
      margin: {
        top: '1in',
        bottom: '1in',
        left: '1in',
        right: '0.75in'
      }
    },
    'novella-a5': {
      format: 'A5',
      width: 'A5',
      height: 'A5',
      margin: {
        top: '0.75in',
        bottom: '0.75in',
        left: '0.75in',
        right: '0.5in'
      }
    }
  };
  
  return settings[templateId] || settings['serif-classic'];
};

// Create sample files if they don't exist
const createSampleFiles = (projectId) => {
  const sampleContent = `# ${projectId.charAt(0).toUpperCase() + projectId.slice(1)} - Sample Manuscript

This is a professionally formatted manuscript for project **${projectId}**.

## Chapter One: The Beginning

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

## Chapter Two: The Development

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

### A Subsection

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident.

## Chapter Three: The Resolution

Similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.

Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.

## Conclusion

This completes the sample manuscript conversion process. The document has been formatted according to professional publishing standards and is ready for distribution.

*Generated by BookMagic - Professional Book Formatting*
`;

  // Create markdown file for processing
  const sampleMd = path.join('uploads', `${projectId}.md`);
  if (!fs.existsSync(sampleMd)) {
    fs.writeFileSync(sampleMd, sampleContent);
  }
  
  return sampleMd;
};

// Create sample license and checklist files
const createSampleAssets = () => {
  const licensePath = path.join('fonts', 'LICENSE.txt');
  if (!fs.existsSync(licensePath)) {
    const licenseContent = `Font License Agreement

This package includes fonts that are licensed for use in published books.

Included Fonts:
- EB Garamond (Open Font License)
- Lora (Open Font License)  
- Source Serif Pro (Open Font License)

These fonts are free to use for both personal and commercial projects.
For more information, visit the respective font foundries.

Generated by BookMagic - Professional Book Formatting
`;
    fs.writeFileSync(licensePath, licenseContent);
  }
  
  const checklistPath = path.join('checklist', 'kdp.txt');
  if (!fs.existsSync(checklistPath)) {
    const checklistContent = `KDP Publishing Checklist

✓ Manuscript formatted with professional template
✓ Proper page margins and spacing
✓ Consistent typography throughout
✓ Table of contents generated
✓ Print-ready PDF created
✓ EPUB file validated
✓ Font licenses included
✓ Ready for upload to KDP

Generated by BookMagic
Visit https://kdp.amazon.com for publishing guidelines
`;
    fs.writeFileSync(checklistPath, checklistContent);
  }
};

// Simple EPUB creator (replaces Pandoc EPUB generation)
const createSimpleEpub = (htmlContent, outputPath, projectId) => {
  // For demo purposes, create a simple ZIP file with EPUB structure
  const epubContent = `<?xml version="1.0" encoding="UTF-8"?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="bookid" version="2.0">
  <metadata>
    <dc:title xmlns:dc="http://purl.org/dc/elements/1.1/">${projectId} - Formatted Book</dc:title>
    <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Author Name</dc:creator>
    <dc:identifier xmlns:dc="http://purl.org/dc/elements/1.1/" id="bookid">bookmagic-${projectId}</dc:identifier>
    <dc:language xmlns:dc="http://purl.org/dc/elements/1.1/">en</dc:language>
  </metadata>
  <manifest>
    <item id="content" href="content.html" media-type="application/xhtml+xml"/>
  </manifest>
  <spine>
    <itemref idref="content"/>
  </spine>
</package>`;

  // Create a simple text file with EPUB extension for demo
  const simpleEpubContent = `EPUB File for ${projectId}

This is a sample EPUB file generated by BookMagic.
In a production environment, this would be a proper EPUB file created by Pandoc.

Content Preview:
${htmlContent.replace(/<[^>]*>/g, '').substring(0, 500)}...

Generated by BookMagic - Professional Book Formatting
`;
  
  fs.writeFileSync(outputPath, simpleEpubContent);
};

async function convert(projectId, templateId, userPlan = 'free') {
  try {
    console.log(`Starting conversion for project ${projectId} with template ${templateId} (${userPlan} plan)`);
    
    // Ensure directories exist
    ensureDirectories();
    createSampleAssets();
    
    // Create sample input file for demo
    const inputPath = createSampleFiles(projectId);
    const htmlPath = path.join('output', `${projectId}.html`);
    const epubPath = path.join('output', `${projectId}.epub`);
    const pdfPath = path.join('output', `${projectId}.pdf`);
    const exportDir = path.join('public', 'exports', projectId);
    const zipPath = path.join(exportDir, 'export.zip');
    
    // Ensure export directory exists
    fsExtra.ensureDirSync(exportDir);
    
    console.log('Converting markdown to HTML...');
    // Read markdown and convert to HTML (replaces Pandoc)
    const markdownContent = fs.readFileSync(inputPath, 'utf-8');
    const htmlContent = markdownToHtml(markdownContent);
    
    console.log('Applying template CSS...');
    // Read and inject template CSS
    const cssPath = path.join('template-css', `${templateId}.css`);
    let css = '';
    
    if (fs.existsSync(cssPath)) {
      css = fs.readFileSync(cssPath, 'utf-8');
    } else {
      // Fallback CSS if template file doesn't exist
      css = `
        body { font-family: serif; font-size: 11pt; line-height: 1.4; margin: 1in; }
        h1 { font-size: 18pt; margin: 2em 0 1em 0; }
        h2 { font-size: 14pt; margin: 1.5em 0 0.5em 0; }
        p { margin: 0 0 0.5em 0; text-indent: 1.5em; }
      `;
    }
    
    // Inject CSS into HTML
    const styledHtml = htmlContent.replace('</head>', `<style>${css}</style></head>`);
    fs.writeFileSync(htmlPath, styledHtml);
    
    console.log('Generating PDF with Playwright...');
    // Create PDF using Playwright
    const browser = await playwright.chromium.launch({ headless: true });
    const page = await browser.newPage();
    
    // Set content and wait for fonts to load
    await page.setContent(styledHtml, { waitUntil: 'networkidle' });
    
    // Add watermark for free plan users
    if (userPlan === 'free') {
      console.log('Adding watermark for free plan user...');
      await page.evaluate(() => {
        const watermark = document.createElement("div");
        watermark.innerText = "WATERMARK — FREE EXPORT";
        watermark.style.position = "fixed";
        watermark.style.bottom = "1in";
        watermark.style.right = "1in";
        watermark.style.opacity = "0.2";
        watermark.style.fontSize = "20px";
        watermark.style.fontWeight = "bold";
        watermark.style.color = "#666666";
        watermark.style.transform = "rotate(-30deg)";
        watermark.style.transformOrigin = "center";
        watermark.style.zIndex = "9999";
        watermark.style.pointerEvents = "none";
        watermark.style.fontFamily = "Arial, sans-serif";
        document.body.appendChild(watermark);
      });
    }
    
    // Get template-specific page settings
    const pageSettings = getTemplatePageSettings(templateId);
    
    // Generate PDF
    await page.pdf({
      path: pdfPath,
      format: pageSettings.format,
      width: pageSettings.width,
      height: pageSettings.height,
      margin: pageSettings.margin,
      printBackground: true,
      preferCSSPageSize: true
    });
    
    await browser.close();
    
    console.log('Generating EPUB...');
    // Create simple EPUB (replaces Pandoc EPUB generation)
    createSimpleEpub(styledHtml, epubPath, projectId);
    
    console.log('Creating export package...');
    // Create ZIP file with all outputs
    const output = fs.createWriteStream(zipPath);
    const archive = archiver('zip', { zlib: { level: 9 } });
    
    return new Promise((resolve, reject) => {
      output.on('close', () => {
        console.log(`Export complete for project ${projectId} (${userPlan} plan)`);
        console.log(`Archive created: ${archive.pointer()} total bytes`);
        console.log(`Files included: EPUB, PDF${userPlan === 'free' ? ' (with watermark)' : ''}, License, Checklist`);
        resolve();
      });
      
      archive.on('error', (err) => {
        console.error('Archive error:', err);
        reject(err);
      });
      
      archive.pipe(output);
      
      // Add files to archive
      if (fs.existsSync(pdfPath)) {
        archive.file(pdfPath, { name: `${projectId}.pdf` });
      }
      if (fs.existsSync(epubPath)) {
        archive.file(epubPath, { name: `${projectId}.epub` });
      }
      
      // Add license file
      const licensePath = path.join('fonts', 'LICENSE.txt');
      if (fs.existsSync(licensePath)) {
        archive.file(licensePath, { name: 'LICENSE.txt' });
      }
      
      // Add checklist file
      const checklistPath = path.join('checklist', 'kdp.txt');
      if (fs.existsSync(checklistPath)) {
        archive.file(checklistPath, { name: 'KDP_Checklist.txt' });
      }
      
      archive.finalize();
    });
    
  } catch (error) {
    console.error(`Conversion failed for project ${projectId}:`, error);
    throw error;
  }
}

// Handle command line arguments
if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.length < 2) {
    console.error('Usage: node worker.js <projectId> <templateId> [userPlan]');
    process.exit(1);
  }
  
  const [projectId, templateId, userPlan = 'free'] = args;
  convert(projectId, templateId, userPlan)
    .then(() => {
      console.log('Conversion completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Conversion failed:', error);
      process.exit(1);
    });
}

module.exports = { convert }; 