import { NextRequest, NextResponse } from 'next/server'
import path from 'path'
import fs from 'fs'

// Mock converter function for demonstration
async function mockConvert(projectId: string, templateId: string, userPlan: string = 'free'): Promise<void> {
  // Simulate conversion delay
  await new Promise(resolve => setTimeout(resolve, 2000))
  
  // Create export directory
  const exportDir = path.join(process.cwd(), 'public', 'exports', projectId)
  if (!fs.existsSync(exportDir)) {
    fs.mkdirSync(exportDir, { recursive: true })
  }
  
  // Create mock export files with plan-specific content
  const watermarkText = userPlan === 'free' ? '\n\n[WATERMARK — FREE EXPORT]' : ''
  
  const mockPdf = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length ${44 + watermarkText.length}
>>
stream
BT
/F1 12 Tf
72 720 Td
(${projectId} - Formatted Book${watermarkText}) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000189 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
${285 + watermarkText.length}
%%EOF`

  const mockEpub = `EPUB File for ${projectId}

This is a sample EPUB file generated by BookMagic using the ${templateId} template.
In a production environment, this would be a proper EPUB file created by Pandoc.

User Plan: ${userPlan.toUpperCase()}
${userPlan === 'free' ? 'Note: PDF version includes watermark for free plan users.' : 'Premium export - no watermarks!'}

Content Preview:
${projectId.charAt(0).toUpperCase() + projectId.slice(1)} - Sample Manuscript

This is a professionally formatted manuscript for project ${projectId}.

Chapter One: The Beginning
Lorem ipsum dolor sit amet, consectetur adipiscing elit...

Generated by BookMagic - Professional Book Formatting`

  const mockLicense = `Font License Agreement

This package includes fonts that are licensed for use in published books.

Included Fonts:
- EB Garamond (Open Font License)
- Lora (Open Font License)  
- Source Serif Pro (Open Font License)

These fonts are free to use for both personal and commercial projects.
For more information, visit the respective font foundries.

Generated by BookMagic - Professional Book Formatting
User Plan: ${userPlan.toUpperCase()}`

  const mockChecklist = `KDP Publishing Checklist for ${projectId}

✓ Manuscript formatted with professional template (${templateId})
✓ Proper page margins and spacing
✓ Consistent typography throughout
✓ Table of contents generated
✓ Print-ready PDF created${userPlan === 'free' ? ' (includes watermark - upgrade to Pro for clean PDFs)' : ' (clean, professional PDF)'}
✓ EPUB file validated
✓ Font licenses included
✓ Ready for upload to KDP

User Plan: ${userPlan.toUpperCase()}
${userPlan === 'free' ? 'Upgrade to Pro for watermark-free exports and unlimited projects!' : 'Thank you for being a Pro user!'}

Generated by BookMagic
Visit https://kdp.amazon.com for publishing guidelines`

  // Write individual files
  fs.writeFileSync(path.join(exportDir, `${projectId}.pdf`), mockPdf)
  fs.writeFileSync(path.join(exportDir, `${projectId}.epub`), mockEpub)
  fs.writeFileSync(path.join(exportDir, 'LICENSE.txt'), mockLicense)
  fs.writeFileSync(path.join(exportDir, 'KDP_Checklist.txt'), mockChecklist)
  
  // Create a simple ZIP-like file (for demo purposes, just concatenate files)
  const zipContent = `BookMagic Export Package for ${projectId}
Template: ${templateId}
User Plan: ${userPlan.toUpperCase()}
Generated: ${new Date().toISOString()}

This package contains:
- ${projectId}.pdf (Print-ready PDF${userPlan === 'free' ? ' - includes watermark' : ' - clean, professional'})
- ${projectId}.epub (Digital book format)
- LICENSE.txt (Font licenses)
- KDP_Checklist.txt (Publishing guidelines)

${userPlan === 'free' 
  ? 'Free Plan: PDFs include watermarks. Upgrade to Pro for clean exports!'
  : 'Pro Plan: Clean, professional exports with no watermarks.'
}

Files are ready for publishing on Amazon KDP, IngramSpark, and other platforms.

Generated by BookMagic - Professional Book Formatting
`
  
  fs.writeFileSync(path.join(exportDir, 'export.zip'), zipContent)
}

export async function POST(request: NextRequest) {
  try {
    const { projectId, templateId, userPlan = 'free' } = await request.json()

    if (!projectId || !templateId) {
      return NextResponse.json(
        { error: 'Missing projectId or templateId' },
        { status: 400 }
      )
    }

    console.log(`Starting export for project ${projectId} with template ${templateId} (${userPlan} plan)`)

    try {
      // Call the mock convert function with user plan
      await mockConvert(projectId, templateId, userPlan)
      
      // Check if export file was created
      const exportPath = path.join(process.cwd(), 'public', 'exports', projectId, 'export.zip')
      
      if (fs.existsSync(exportPath)) {
        return NextResponse.json({
          success: true,
          message: 'Export completed successfully',
          projectId,
          templateId,
          userPlan,
          exportPath: `/exports/${projectId}/export.zip`,
          stdout: `Export completed for project ${projectId} using ${templateId} template (${userPlan} plan)${userPlan === 'free' ? ' - PDF includes watermark' : ' - clean PDF'}`
        })
      } else {
        return NextResponse.json({
          success: false,
          error: 'Export file was not created',
          projectId,
          templateId
        }, { status: 500 })
      }
      
    } catch (conversionError) {
      console.error('Conversion error:', conversionError)
      return NextResponse.json({
        success: false,
        error: 'Conversion process failed',
        details: conversionError instanceof Error ? conversionError.message : 'Unknown conversion error'
      }, { status: 500 })
    }

  } catch (error) {
    console.error('Export API error:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Export process failed',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const projectId = searchParams.get('projectId')

  if (!projectId) {
    return NextResponse.json(
      { error: 'Missing projectId parameter' },
      { status: 400 }
    )
  }

  // Check export status
  const exportPath = path.join(process.cwd(), 'public', 'exports', projectId, 'export.zip')
  const exportExists = fs.existsSync(exportPath)

  if (exportExists) {
    const stats = fs.statSync(exportPath)
    return NextResponse.json({
      ready: true,
      projectId,
      exportPath: `/exports/${projectId}/export.zip`,
      size: stats.size,
      createdAt: stats.birthtime
    })
  } else {
    return NextResponse.json({
      ready: false,
      projectId
    })
  }
} 